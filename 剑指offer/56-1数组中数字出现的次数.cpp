/*
一个整型数组 nums 里除两个数字之外，其他数字都出现了两次。请写程序找出这两个只出现一次的数字。要求时间复杂度是O(n)，空间复杂度是O(1)。
*/

// 1. 数组内所有元素异或后得到的值 等价于 两个只出现一次的数异或
// 2. 根据异或的结果 找出两个只出现过一次的数的二进制位的区别 即异或结果的任意一个二进制位为 1 ，那么这一位在只出现过一次的两个数中 必然是其中一个为1 另一个不是
// 3. 通过这一位将这两个只出现过一次的数分开
// 4. 至于其他出现过两次的数 通过这一位是否为 1 也自然分成了两部分 同一个数这一位肯定是一样的

class Solution {
public:
    vector<int> singleNumbers(vector<int>& nums) {
        int ret = 0;
        for (int i = 0; i < nums.size(); ++i) {
            ret ^= nums[i];
        }
        
        int div = 1;
        while ((div & ret) == 0) {
            div <<= 1;
        }

        int a = 0, b = 0;
        for  (int i = 0; i < nums.size(); ++i) {
            if (div & nums[i]) {
                a ^= nums[i];
            }
            else {
                b ^= nums[i];
            }
        }

        return vector<int>{a, b};
    }
};
/*
执行结果：通过 显示详情 添加备注
执行用时：12 ms, 在所有 C++ 提交中击败了94.64%的用户
内存消耗：15.6 MB, 在所有 C++ 提交中击败了82.61%的用户
通过测试用例：35 / 35
*/